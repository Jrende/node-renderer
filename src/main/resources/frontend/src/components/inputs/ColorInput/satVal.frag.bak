precision highp float;
varying vec3 uvw;

uniform mat4 mvp2;
uniform vec2 resolution;
uniform float scale;
uniform float hue;
uniform vec2 p1;
uniform vec2 p2;
uniform vec2 p3;
uniform vec2 p1t;
uniform vec2 p2t;
uniform vec2 p3t;
uniform mat4 mvp;

#define PI2 6.28318530718
//#define PI 3.1415926
#define PI 3.14159265359
#define COS30 0.8660254037844386
#define TAN30 0.5773502691896257
#define COS60 0.5
#define TAN60 1.7320508075688767


vec3 hsv2rgb2(vec3 c) {
  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

float getAngle(vec2 v1, vec2 v2) {
  float det = v1.x*v2.y - v1.y * v2.x;
  float rad = atan(dot(v1, v2), det);
  if(rad < 0.0) {
    rad += PI2;
  }
  return rad;
}

float getTriangleWidth(float y) {
  return (1.0 - uvw.x) * 0.8;
}

float getProjection(vec2 a, vec2 b) {
  return dot(a, b / length(b));
}

float getDistFromEdge(vec2 pos, vec2 p1, vec2 p2, vec2 p3) {
  //vec2 p = pos - p3;
  //vec2 n1 = (p2 - p3);
  //vec2 n2 = (cross(vec3(n1, 0.0), vec3(0, 0, -1.0)).xy);
  //float adjacent = dot(p, n1) / TAN30;
  //float smolAdjacent = adjacent - dot(p, n2);
  //float distanceToEdge = smolAdjacent * TAN30;
  //return distanceToEdge * 0.8;
  //return smoothstep(0.1, 1.1, distanceToEdge * 0.8);
  //return smoothstep(0.0, 1.0, dot(p, n1));
  return uvwp.y / getTriangleWidth(dot(p, normalize(n2)));
}

void main(void) {
  vec2 c = gl_FragCoord.xy / resolution.xy;
  vec2 mid = vec2(0.5, 0.5);
  /*
  vec2 p1 = p1t + mid;
  vec2 p2 = p2t + mid;
  vec2 p3 = p3t + mid;

  //float angle = getDistFromEdge(c, p1, p2, p3);
  //gl_FragColor = vec4(vec3(angle), 1.0);
  float rot = (-hue * PI * 2.0 - PI/2.0);
  mat2 rotmat = mat2(
    cos(rot), -sin(rot),
    sin(rot), cos(rot)
  );


  vec2 p = c;
  vec2 n1 = (p1 - p3);
  //vec2 n2 = (cross(vec3(n1, 0.0), vec3(0, 0, -1.0)).xy);
  //float d1 = (length(n1) * COS60) / dot(p, n1);
  vec2 point = (mvp2 * vec4(p1, 0.0, 1.0)).xy;
  float d1 = distance(c, point);
  //float d2 = dot(p, n2);
*/
  //float d1 = uvw.z;
  float d1 = getDistFromEdge(c, p1, p2, p3);
  //float d1 = distance(c, point) / distance(p1q, p2q);
  gl_FragColor = vec4(d1, d1, d1, 1.0);
}
